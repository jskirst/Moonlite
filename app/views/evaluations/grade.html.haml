:css
  body{ background-image: url("https://s3.amazonaws.com/moonlite-nsdub/static/Backgrounds/gplaypattern.png"); background-repeat: repeat; background-size: auto; }
  .aboutcontainer{ width: 900px; margin-top: 25px; border-radius: 0; }

#evaluations_overview.aboutcontainer
  .aboutbox
    .header
      = image_tag GIANT_STONEY, style:"display:inline; height:61px;", alt: "Stoney"
      %div{ style: "display: inline-block; vertical-align: top; margin-left: 5px; "}
        %h2{ style: "font-size: 30px; margin-bottom: -10px; margin-top: -3px; " }= @user.name
        %h3{ style: "font-size:20px; "}= @evaluation.title
      .actions{ style: "float: right;" }
        = link_to "Back", group_evaluation_url(@group, @evaluation), class: "button button-standard button-mini"
        - if @evaluation_enrollment.archived_at
          = link_to "Unarchive", save_group_evaluation_url(@group, @evaluation, user_id: @user.id, mode: "unarchive"), method: :put, class: "button button-standard button-mini"
        - elsif @evaluation_enrollment.favorited_at
          = link_to "Unfavorite", save_group_evaluation_url(@group, @evaluation, user_id: @user.id, mode: "unfavorite"), method: :put, class: "button button-standard button-mini"
        - else
          = link_to "Archive", save_group_evaluation_url(@group, @evaluation, user_id: @user.id, mode: "archive"), method: :put, class: "button button-standard button-mini"
          = link_to "Favorite", save_group_evaluation_url(@group, @evaluation, user_id: @user.id, mode: "favorite"), method: :put, class: "button button-standard button-mini"
      %hr
    .body        
      .evaluations
        - path = @tasks_by_path.first
        %h3= path[:name]
        - if path[:core_tasks].any?
          %p Number correct: #{path[:number_correct]}
          %p Number incorrect: #{path[:number_correct]}
          %p Percent correct: #{path[:percent_correct].to_i}%
        - path[:creative_tasks].each do |completed_task|
          .answer
            - task = completed_task.task
            %h4= task.question
            %pre= completed_task.submitted_answer.try(:content).to_s
        - path[:core_tasks].each do |completed_task|
          .answer
            - task = completed_task.task
            %h4= task.question
            - is_correct = completed_task.correct?
            %p= is_correct ? "Correct" : "Incorrect"
            %p= task.correct_answer.content # Correct answer
            %p= completed_task.answer # User supplied answer
            %p= completed_task.points_awarded