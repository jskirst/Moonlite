:css
  #task_answer_type { vertical-align: top; }

- rand_id = rand(1000)
- template_id = "template_#{rand_id}"
- new_task = task.new_record?
- submit_label = new_task ? "Add New Question" : "Save"

= form_for(task, remote: true, html: { "data-type" => "html", class: "form-horizontal question_creator #{'new-task-form' if new_task}"}) do |f|
  = f.hidden_field :section_id
  %div.floatr
    %button#save_question_button.submit_button.button.button-small= submit_label
    - unless new_task
      %button.button.submit_button_standard.button-small{ style: "margin-right: 10px;", type: "button", onclick: "$(this).parents('td').find('div.question_display').show(); $(this).parents('.question_creator').remove();" } Close
  %div.task_form
    .control-group{ style: "margin-bottom: 5px" }
      .controls.status.alert-error.hide
    .control-group
      %label.control-label Question
      .controls
        = f.text_area :question, class: "input-xlarge question_input", placeholder: "Type your question here...", style: "width: 450px; height: 100px;"
    - if new_task or task.multiple_choice? or task.exact?
      .multiple_choice.exact.control-group
        %label.control-label Quoted text (optional)
        .controls{ style: "margin-top: 3px;" }
          - unless task.quoted_text
            %a.show_quoted_text{ onclick: "$(this).hide(); $(this).siblings('.quoted_text_tt').hide(); $(this).siblings('.big_text_area').show();" } Add quoted text
            .quoted_text_tt
              %div{ "data-tip" => "Quoted text is good for a block of text that your question references. For example, you might want to include a paragraph of text with your question, or a code snippet."}
                %img{src: "https://s3.amazonaws.com/moonlite-nsdub/static/random+icons/tooltip_light.png"}
          = text_area_tag "task[quoted_text]", task.quoted_text, class: "big_text_area", style: task.quoted_text.blank? ? "display: none;" : ""

    %div.row
      %div.answers{ style: "margin-left: 20px;" }
        
        - if new_task
          .control-group
            %label.control-label Answer type
            /* The class tt_signal allows us to insert a tt into the image upload resource */
            .controls.image_upload.tt_signal
              = f.select :answer_type, hash_to_array(Task::TYPES)
              = render "stored_resources/new_image"
        
          .control-group.hide.sub_type
            %label.control-label Response type
            .controls
              = f.select :answer_sub_type, hash_to_array(Task::SUBTYPES)
        
              
        - if task.task? or new_task
          .checkin.hide
            .control-group
              %label.control-label
                = image_tag LIGHT_BULB_URL, style: "width: 16px; height: 16px; margin-top: -11px; margin-right: -12px;"
              .controls{ style: "width: 400px;" }
                %p All Tasks require proof of completion in the form of a webpage. If proof of completion for the Task you want to create cannot be easily obtained from a website url, consider rephrasing or changing it.
                
        - if task.creative? or new_task
          .creative.template_toggle{ style: (new_task ? "display: none;" : "") }
            .creative.checkin.hide
              .control-group
                %label.control-label
                  = image_tag LIGHT_BULB_URL, style: "width: 16px; height: 16px; margin-top: -11px; margin-right: -12px;"
                .controls{ style: "width: 400px;" }
                  %p.free_text_note.answer_note.hide{ style: "margin-bottom: 5px;" } To answer this question, the user will be asked to type an appropriate free response into a text box.
                  %p.image_link_note.answer_note.hide To answer this question, the user will be asked to copy and paste a link to an image from the internet.
                  %p.youtube_link_note.answer_note.hide To answer this question, the user will be asked to copy and paste a link to a video from Youtube.
            - if @group
              .control-group
                %label.control-label Time limit
                .controls
                  = f.select :time_limit, hash_to_array(Task::TIME_LIMIT), { include_blank: true }, class: "span2"
            .control-group      
              %label.control-label Template (optional)
              .controls{ style: "margin-top: 3px;" }
                %a.show_template{ onclick: "$(this).hide(); $(this).siblings('.remove_template').show(); $(this).siblings('.ace_editor').show();", style: (task.template.blank? ? "" :  "display: none;") }= (task.template.nil? ? "Add template to question" : "Edit question template")
                %a.remove_template{ onclick: "$(this).hide(); $(this).siblings('.show_template').show(); $(this).siblings('.ace_editor').hide();", style: (task.template.blank? ? "display: none;" :  "") } Close template
                .cr_template_tt
                  %div{ "data-tip" => "Text you include in the template will be supplied to the user in their editable answer field. Templates are useful to guide what format you'd like a response in. They can also be used to give the user something to edit, improve, or build upon."}
                    %img{src: "https://s3.amazonaws.com/moonlite-nsdub/static/random+icons/tooltip_light.png"}
                = text_area_tag "task[template]", task.template, class: "hidden_text_area", style: "display: none;"
                %div{ id: template_id, class: "ace_editor", style:"width: 97%; margin: 0 auto 5px auto; min-height: 175px; position: relative; padding-top:0; #{task.template.blank? ? "display: none;" :  ""}"} 
        
        - if new_task or task.exact?
          .exact.hide
            .control-group
              %label.control-label
                = image_tag LIGHT_BULB_URL, style: "width: 16px; height: 16px; margin-top: -11px; margin-right: -12px;"
              .controls{ style: "width: 400px;" }
                %p{ style: "margin-bottom: 15px;" } To answer this question, the user will be asked to type an answer to the question. Exact questions work best with numerical or one-word answers. (Responses are case-insensitive.)
              %label.control-label Exact Answer
              .controls
                = text_field_tag("task[exact1]", nil, { maxlength: 255, size: 75 })

        
        - unless answers.empty?
          .multiple_choice
            - answers.each_with_index do |a, i|
              %div.control-group
                %label.control-label= a.is_correct ? "Correct answer" : "Wrong answer"
                .controls
                  = f.text_field "answer_#{a.id || "new_" + (i + 1).to_s}", value: a.content, maxlength: 255, size: 75, class: (a.is_correct ? "correct_answer" : "wrong_answer")
                       
        .control-group
          %label.control-label Difficulty
          .controls
            = f.select :difficulty, Task::DIFFICULTY_TYPES.collect{ |k,v| [v, k]}, class: "select input-medium"
            .difficulty_tt
              %div{ "data-tip" => "Choose the approximate difficulty level for this question. This helps MetaBright more quickly identify the skill level of the person taking the question." }
                %img{src: "https://s3.amazonaws.com/moonlite-nsdub/static/random+icons/tooltip_light.png"}
                
        - unless new_task
          .control-group
            %label.control-label Image
            .controls
              - if sr = task.stored_resources.first
                .existing-image
                  = image_tag sr.obj.url, style: "height: 100px;"
                  = link_to "Remove", delete_stored_resource_path(sr.id), method: :delete, class: "delete-image", remote: true, data: { confirm: "Are you sure you want to remove this attachment?" }
              .new-image{ style: ((sr = task.stored_resources.first).nil? ? "" : "display: none")}
                .image_upload.tt_signal{ style: "position: relative; right: 40px;"}
                  = render "stored_resources/new_image"
          - unless @group  
            .control-group
              %label.control-label Section
              .controls
                = f.select :section_id, @sections.collect { |s| [s.name, s.id] }
        - unless @group      
          .control-group
            %label.control-label Source URL
            .controls
              = f.text_field :resource, placeholder: "Optional, but suggested..."           
          .control-group 
            %label.control-label Source Description
            .controls
              = f.text_field :resource_title, placeholder: "Optional, but suggested..."
        
        - if @enable_administration
          %h4 Admin        
          .creative.hide
            .control-group
              %label.control-label Exact answer (optional)
              .controls
                = text_field_tag("task[exact1]", nil, { maxlength: 255, size: 75 })
          .control-group
            %label.control-label Position
            .controls
              = f.text_field :position                
          - unless @topics.empty?
            .control-group
              %label.control-label Topic
              .controls
                - topics = [["Select Topic", nil]]
                - @topics.each{ |t| topics << [t.name, t.id] }
                = f.select :topic_id, topics
          .control-group
            %label.control-label Other Topic
            .controls
              = f.text_field :topic_name        
- if new_task or task.creative?
  :javascript
    var editor = ace.edit("#{template_id}");
    editor.setTheme("ace/theme/github");    
    editor.getSession().setUseSoftTabs(true);
    editor.getSession().setTabSize(2);
    var $textarea = $("##{template_id}").siblings(".hidden_text_area");
    editor.getSession().setValue($textarea.val());
    editor.getSession().on('change', function(){
      $textarea.val(editor.getSession().getValue());
    });

:javascript
  function display_sub_type_message(){
    var sub_type = $("#task_answer_sub_type").val();
    $(".answer_note").hide();
    if(sub_type=="100"){
      $(".free_text_note").show();
    } else if(sub_type=="101"){
      $(".image_link_note").show();
    } else {
      $(".youtube_link_note").show();
    }
  }
  
  $("#task_answer_sub_type").change(function(){
    display_sub_type_message();
  });

  $("select[name='task[answer_type]']").change(function(){
    $(".creative").hide();
    $(".multiple_choice").hide();
    $(".checkin").hide();
    $(".exact").hide();
    $(".template").hide();
    $(this).parents("div.control-group").siblings(".sub_type").hide();
    var type = $(this).val();
    if(type == 0){
      $(".creative").show();
      display_sub_type_message();
    } else if(type == 1) {
      $(".exact").show();
    } else if(type == 2) {
      $(".multiple_choice").show();
    } else if(type == 3) {
      $(".checkin").show();
    }
  });
  
  $(function(){
    $(".question_creator").on("ajax:success", function(xhr, data){
      $(this).find(".status").removeClass("alert-error");
      $(this).find(".status").addClass("alert-success").text("Question added...").show().fadeOut(10000);
    }).on("ajax:error", function(xhr, data){
      data = $.parseJSON(data.responseText);
      $(this).find(".status").removeClass("alert-success");
      $(this).find(".status").addClass("alert-error").text(data.error).show().fadeOut(10000);
    })

    $(".delete-image").unbind("ajax:success");
    $(".delete-image").on("ajax:success", function(){
      var parent = $(this).parent().parent();
      parent.find(".existing-image").hide()
      parent.find(".new-image").show();
      return false;
    });
  });
