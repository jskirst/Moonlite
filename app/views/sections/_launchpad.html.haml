%div.sectioninfocontainer
  %div.launchpadCRcolumn
    %div.launchpadcolumnheader
      - if current_user.guest_user?
        %button.login_link.button.button-small.button-actionable{ style: "margin-top: -5px; text-shadow:none;", onclick: "$('#login_modal').modal({ keyboard: true, backdrop: 'static', show: true });" } Save Score
      - elsif @enrollment.contribution_unlocked?
        %button#editor_link.button.button-small.button-actionable{ style: "margin-top: -5px; text-shadow:none;" } Create a Question
      %ul.nav.nav-tabs
        %li.active
          %a#arena_tab_link{ data: { tab: "arena_tab" }, title: "Arena"} Arena
        %li
          %a#questions_tab_link{ data: { tab: "questions_tab" }, title: "Creative Responses"}  Creative Response
        %li
          %a#achievement_tab_link{ data: { tab: "achievements_tab" }, title: "Tasks"} Tasks      
      
      %div#arena_tab.tab_content{style:"margin-left:12px;"}
        - if @enrollment.contribution_unlocked?
          = render "tasks/new_multiple_choice", section: @current_section
        %div.task_view{ style: "text-align: center;font-size: 16px;" }
          %div.tip
            %img{ src: "https://s3.amazonaws.com/moonlite-nsdub/static/Lightbulb+icon", alt: "Tip" }
            %p Enter the Arena and take multiple-choice questions to discover where you stand. 
          - tasks_completed = @core_tasks.select{ |t| not t.status_id.nil? }.size > 0
          - if @core_tasks.empty?
            %p No Arena questions are available at the moment. Check back again later.
          - elsif tasks_completed
            - correct_tasks = @core_tasks.select{ |t| t.status_id && t.status_id.to_i == Answer::CORRECT }.size
            - earned_points = 0
            - @core_tasks.each { |t| earned_points += t.points_awarded.to_i }
            - incorrect_tasks = @core_tasks.select{ |t| t.status_id && t.status_id.to_i == Answer::INCORRECT }.size
            - tasks_remaining_count = @core_tasks.select{ |t| t.status_id.nil? }.size
            %p You answered <strong>#{correct_tasks} out of #{correct_tasks + incorrect_tasks}</strong> Arena questions correctly, and scored <strong>#{earned_points} points</strong>!
            %p You have <strong>#{tasks_remaining_count} unanswered questions</strong>.
            - tasks_remaining = @core_tasks.select{ |t| t.status_id.nil? }.size > 0           
            - if tasks_remaining
              %p= link_to "Continue", start_section_path(@current_section), class: "button button-actionable button-large"
            - else
              %p Arena questions are added frequently. When more are available, you can return here to take them. Complete <strong>Tasks</strong> or answer some <strong>Creative Responses</strong> to earn more points and continue to level up. 
          - else
            %p= link_to "Start", start_section_path(@current_section), class: "button button-actionable button-large"            
      
      %div#questions_tab.tab_content
        - if @enrollment.contribution_unlocked?
          = render "tasks/new_creative_response", section: @current_section
        %div.task_view
          %div.tip
            %img{src:"https://s3.amazonaws.com/moonlite-nsdub/static/Lightbulb+icon", alt: "Tip"}
            %p Creative Responses let you demonstrate your skills. Responses to CR's appear in the stream so they can be voted and commented upon.
          - if @challenge_tasks.empty?
            %p No Creative Responses available.
          - else
            %table
              - @challenge_tasks.each do |t|
                %tr
                  %td
                    %div= link_to t.question, take_section_path(@current_section, task_id: t.id)
                  %td.question_status
                    - if t.status_id
                      - if t.status_id.to_i == Answer::INCOMPLETE
                        = link_to "Draft", take_section_path(@current_section, task_id: t.id), class: "label label-info"
                      - elsif t.status_id.to_i == Answer::CORRECT
                        = link_to "Completed", profile_path(current_user.username, task: t.id), class: "label label-success", style:"position:relative; top:3px;", target: "_blank"
                        %span.points= t.points_awarded.to_i.to_s + " points"
                      - else
                        - raise "Bad status: #{t.status_id.to_s}"
                    - else
                      = link_to "Incomplete", take_section_path(@current_section, task_id: t.id), class: "label label-important"
      
      %div#achievements_tab.tab_content{ style: "display: none;" }
        - if @enrollment.contribution_unlocked?
          = render "tasks/new_task", section: @current_section
        %div.task_view
          %div.tip
            %img{src:"https://s3.amazonaws.com/moonlite-nsdub/static/Lightbulb+icon", alt: "Tip"}
            %p Use Tasks to verify the things you've done and guide you towards what to do next. 
          - if @achievement_tasks.empty?
            %p No Tasks are available at the moment. Check back again later.
          - else
            %table
              - @achievement_tasks.each do |t|
                %tr
                  %td
                    - if t.status_id
                      %div= link_to t.question, profile_path(current_user.username, task: t.id)
                    - else
                      %div= link_to t.question, take_section_path(@current_section, task_id: t.id)
                  %td.question_status
                    - if t.status_id
                      = link_to "Completed", profile_path(current_user.username, task: t.id), class: "label label-success", style:"position:relative; top:3px;", target: "_blank"
                      %br
                      %div.points{style:"margin-right:4px;"}= t.points_awarded.to_i.to_s + " points"
                    - else
                      = link_to "Incomplete", take_section_path(@current_section, task_id: t.id), class: "label label-important"

  :javascript
    function log_error(error){
      $(".editor_view:visible").find("span.error_message").text(error).show().delay(3000).fadeOut("slow");
      return false;
    }
    
    $(".core_question_type").click(function(){
      if($(this).data("type") == "exact"){
        $(".wrong_answer").attr("disabled", "disabled");
      } else {
        $(".wrong_answer").removeAttr("disabled");
      }
    })
    
    var display_type = #{@display_type || 0};
    var open_tab;
    var task_subtypes = #{Task::SUBTYPES.to_json};
    
    if(display_type == 0){ open_tab = "#questions_tab_link"; } 
    if(display_type == 2){ open_tab = "#arena_tab_link"; } 
    if(display_type == 3){ open_tab = "#achievement_tab_link"; }
    
    $(".tab_content").hide();
    $("ul.nav-tabs li.active").removeClass("active");
    $(open_tab).parent().addClass("active");
    $("#"+$(open_tab).attr("data-tab")).show().addClass("active_tab");
    
    $(".nav-tabs li a").click(function(){
      $(".tab_content").hide();
      $("ul.nav-tabs li.active").removeClass("active");
      $(this).parent().addClass("active");
      $(".active_tab").removeClass("active_tab");
      var $open_tab = $("#"+$(this).attr("data-tab"));
      $open_tab.addClass("active_tab");
      $open_tab.find(".task_view").show();
      $open_tab.find(".editor_view").hide();
      $open_tab.show();
    });
    
    $("#editor_link").click(function(){
      $(".active_tab").find(".task_view").hide();
      $(".active_tab").find(".editor_view").show();
    });
    
    $(".editor_view").each(function(){  
      var $editor = $(this);
      $editor.find(".step1 a.next").click(function(){
        $editor.parents(".headlines").find(".exit").hide();
        if($editor.find("textarea").val() == ""){
          return log_error("You must provide a question.");
        }
        if ($editor.find("input[name*=answer_type]").val() == 2){
          if($editor.find("input[name*=answer1]").val() == ""){
            return log_error("You must provide a correct answer.");
          } else {
            if($editor.find("input[name*=answer2]").val() == ""){
              return log_error("You must provide at least one incorrect answer.");
            }
          }
        }
        
        $editor.find(".step1").hide();
        $editor.find(".step2").show();
      });      
      
      $editor.find(".step2 a.back").click(function(){
        $editor.find(".step2").hide();
        $editor.find(".step1").show();
        $editor.parents(".headlines").find(".exit").show();
      });
       
      $editor.find(".step2 a.next").click(function(){
        $editor.find(".step3 code.question").text($editor.find("textarea[name='task[question]']").val());
        $editor.find(".step3 code.correct_answer").text($editor.find("input.correct_answer").val());
        $editor.find(".step2").hide();
        $editor.find(".step3").show();
        $editor.parents(".headlines").find(".exit").hide(); 
      });
      
      $editor.find(".step3 a.back").click(function(){
        $editor.find(".step3").hide();
        $editor.find(".step2").show();
        $editor.parents(".headlines").find(".exit").show();
      });
      
      $editor.find(".step3 a.restart").click(function(){
        $editor.find(".step3").hide();
        $editor.find(".step1").find("input[type=text],textarea").val("");
        $editor.find(".step1").show();
        $editor.parents(".headlines").find(".exit").show();
      });
      
      $editor.find(".step3 a.finish").click(function(){
        $(".headlines").hide();
        $(".launchpadcontent").show();
        $editor.find(".step3").hide();
        $editor.find(".step1").find("input[type=text],textarea").val("");
        $editor.find(".step1").show();
        $editor.hide();
        $editor.siblings(".task_view").show();
      });
      
      $editor.find("form").on("ajax:success", function(event, data){
        $editor.find(".step2").hide();
        $editor.find(".step3").find("a.take").attr("href", data.question_link);
        $editor.find(".step3").show();
      });
    });
    
    
    var editor = ace.edit("editor");
    editor.setTheme("ace/theme/github");    
    editor.getSession().setUseSoftTabs(true);
    editor.getSession().setTabSize(2);
    var $textarea = $('textarea[name="content"]').hide();
    var $submit = $("#submit_button");
    editor.getSession().setValue($textarea.val());
    editor.getSession().on('change', function(){
      $textarea.val(editor.getSession().getValue());
      if($textarea.data("template") != $textarea.val()){
        $submit.removeClass("disabled").removeAttr("disabled");
      } else {
        $submit.addClass("disabled").attr("disabled", "disabled");
      }
    });
    
    $('#points-tt1').tooltip({trigger: 'click', title:'Questions and Tasks can be reported for spam, misplacement, and egregiously poor quality.'})
    $('#points-tt2').tooltip({trigger: 'click', title:'Questions and Tasks can be reported for spam, misplacement, and egregiously poor quality.'})
    $('#points-tt3').tooltip({trigger: 'click', title:'Questions and Tasks can be reported for spam, misplacement, and egregiously poor quality.'})
